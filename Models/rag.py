import openai
import Product  # âœ… Directly importing Product class from models.py
from embeddings import get_embedding  # Import the function for getting embeddings
from typing import List  # Ensure compatibility for older versions of Python (<=3.8)

openai.api_key = "your_openai_api_key"  # Set your OpenAI API key

def format_product(product: Product) -> str:
    """
    Format the product and its attributes into a readable string for the AI model.
    """
    # Extract the category, attributes, and format product details
    cat = product.category
    attrs = product.attributes
    attr_text = "\n".join(
        f"- {attr.variant_tag or ''}: {attr.value}" for attr in attrs
    )

    return f"""Product: {product.name}
SKU: {product.sku}
Category: {cat.name if cat else 'N/A'}
Description: {product.description}
Attributes:
{attr_text}
Status: {product.status}
Unit Type: {product.unit_type}
Price: {product.selling_price}
"""

def generate_answer(query: str, products: List[Product], top_k: int = 5) -> str:
    """
    Generate a summarized answer using OpenAI based on the retrieved product information.
    """
    # Format the top K products to present to the model
    product_texts = "\n\n".join(format_product(p) for p in products[:top_k])

    # Build a prompt for GPT to evaluate and recommend
    prompt = f"""You are a helpful assistant in an e-commerce store.

Query: {query}

Here are the top {top_k} matching products:

{product_texts}

Based on the user's query, which product(s) best match the intent and why? Be concise but helpful.
"""

    # Make a call to the OpenAI API for generation
    response = openai.chat.completions.create(
        model="gpt-4-turbo",  # You can use "gpt-3.5-turbo" for a lower-cost option
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )

    # Return the response generated by GPT
    return response.choices[0].message.content
